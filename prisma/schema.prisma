generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum ShiftStatus {
    SCHEDULED
    COMPLETED
    CANCELED
}

enum GenderStatus {
    Male
    Female
}

enum RoleStatus {
    Carer
    Admin
    Coordinator
    HR
    OfficeSupport
    Ops
    Kiosk
    Others
}

enum EmploymentTypeStatus {
    FullTime
    PartTime
    Casual
    Contractor
    Others
}

enum SubscriptionPeriod {
    Monthly
    Annually
    Free_Trail
}

enum MaritalStatus {
    Single
    Married
    Divorced
    Widowed
    Separated
}

model NextOfKin {
    id       String @id @default(uuid())
    staffId  String @unique
    name     String
    relation String
    contact  String
    email    String @unique
}

model PayrollSettings {
    id            String @id @default(uuid())
    staffId       String @unique
    bankName      String
    accountNumber String
    taxCode       String
}

model Compliance {
    id            String   @id @default(uuid())
    staffId       String   @unique
    certification String
    expiryDate    DateTime
    status        String
}

model Settings {
    id                   String  @id @default(uuid())
    staffId              String  @unique
    notificationsEnabled Boolean @default(true)
    theme                String  @default("light")
}

model User {
    id                 String             @id @default(uuid())
    role               String             @default("staff")
    subRoles           String?
    personalDetailsId  String
    companyId          String
    personalDetails    PersonalDetails    @relation(fields: [personalDetailsId], references: [id])
    workDetailsId      String?
    workDetails        WorkDetails?       @relation(fields: [workDetailsId], references: [id])
    archived           Boolean            @default(false)
    createdAt          DateTime           @default(now())
    updatedAt          DateTime           @updatedAt
    publicInformation  PublicInformation?
    clientShifts       Shift[]            @relation("client-shiftUserRelation")
    carerShifts        Shift[]            @relation("carer-shiftUserRelation")
    fund               Fund[]
    subscriptionEnd    DateTime
    subscriptionPeriod SubscriptionPeriod @default(Free_Trail)
}

model Team {
    id          String        @id @default(uuid())
    name        String        @unique
    workDetails WorkDetails[] @relation("TeamWorkDetails")
    createdAt   DateTime      @default(now())
}

model WorkDetails {
    id             String                @id @default(uuid())
    worksAt        String?
    hiredOn        DateTime?
    role           RoleStatus
    employmentType EmploymentTypeStatus?
    teamId         String? // Optional team reference
    team           Team?                 @relation("TeamWorkDetails", fields: [teamId], references: [id])
    user           User[]

    @@index([teamId])
}

model PersonalDetails {
    id               String         @id @default(uuid())
    fullName         String
    email            String         @unique
    phoneNumber      String?        @unique
    address          String?
    dob              DateTime?
    emergencyContact String?
    language         String?
    nationality      String?
    religion         String?
    gender           GenderStatus?
    user             User[]
    unit             String?
    maritalStatus    MaritalStatus?
    clientStatus     String?
}

model PublicInformation {
    id             String   @id @default(uuid())
    generalInfo    String?
    createdAt      DateTime @default(now())
    updatedAt      DateTime @updatedAt
    needToKnowInfo Json?
    usefulInfo     Json?
    staffId        String   @unique
    user           User     @relation(fields: [staffId], references: [id])
}

model Heading {
    id                  String   @id @default(uuid())
    needToKnowInfo      String?
    usefulInfo          String?
    needToKnowMandatory Boolean?
    usefulInfoMandatory Boolean?
    createdAt           DateTime @default(now())
    updatedAt           DateTime @updatedAt
    adminId             String
}

// model Shift {
//     id                   String        @id @default(uuid())
//     clientId             String?
//     client               Staff?        @relation("client-shiftUserRelation", fields: [clientId], references: [id])
//     carerId              String?
//     carer                Staff?        @relation("carer-shiftUserRelation", fields: [carerId], references: [id])
//     shiftType            String?
//     additionalShiftType  String?
//     allowance            String?
//     mileage              Float?
//     additionalCost       Float?
//     confirmationRequired Boolean       @default(false)
//     ignoreStaffCount     Boolean       @default(false)
//     declineAccepted      Boolean       @default(false)
//     date                 DateTime
//     startTime            DateTime
//     endTime              DateTime
//     repeat               Boolean       @default(false)
//     breakTime            Int?
//     unit                 String?
//     dropOffAddress       String?
//     notifyCarer          Boolean       @default(false)
//     tasks                Task[]
//     instructions         Instruction[]
//     createdAt            DateTime      @default(now())
//     updatedAt            DateTime      @updatedAt
//     Location             Location[]
// }

// model Task {
//     id          String   @id @default(uuid())
//     shiftId     String
//     shift       Shift    @relation(fields: [shiftId], references: [id])
//     description String
//     mandatory   Boolean  @default(false)
//     createdAt   DateTime @default(now())
// }

// model Instruction {
//     id        String   @id @default(uuid())
//     shiftId   String
//     shift     Shift    @relation(fields: [shiftId], references: [id])
//     content   String
//     createdAt DateTime @default(now())
// }

// model Location {
//     id        String   @id @default(uuid())
//     address   String
//     shiftId   String
//     shift     Shift    @relation(fields: [shiftId], references: [id])
//     createdAt DateTime @default(now())
// }

model Shift {
    id                   String   @id @default(uuid())
    clientId             String?
    client               User?    @relation("client-shiftUserRelation", fields: [clientId], references: [id])
    carerId              String?
    carer                User?    @relation("carer-shiftUserRelation", fields: [carerId], references: [id])
    payGroup             String?
    priceBook            String?
    funds                String?
    shiftType            String?
    additionalShiftType  String?
    allowance            String?
    data                 String?
    shiftFinishesNextDay Boolean?
    startTime            String?
    endTime              String?
    date                 String?
    repeat               Boolean?
    address              String?
    unitNumber           String?
    instructions         String?
}

model Documents {
    id              String   @id @default(uuid())
    fileName        String
    url             String
    role            String
    category        String?
    expires         String?
    staffVisibility Boolean? @default(false)
    noExpiration    Boolean? @default(false)
    status          String?
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt
}

model Fund {
    id        String   @id @default(uuid())
    name      String
    starts    String?
    expires   String?
    amount    Float?
    balance   Float?
    clientId  String
    isDefault Boolean  @default(false)
    client    User     @relation(fields: [clientId], references: [id])
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Form {
    id           String    @id @default(uuid())
    name         String    @default("Untitled")
    documentType String    @default("Template")
    type         String    @default("General")
    sentDate     DateTime?
    responses    String?
    createdAt    DateTime  @default(now())
    status       String    @default("Pending")
    action       String?
    form         Json?
    updatedAt    DateTime  @updatedAt
}

model Stripe {
    id                       String   @id @default(uuid())
    userId                   String
    stripePriceId            String
    stripeCurrentPeriodEnd   DateTime
    stripeCustomerId         String?
    stripeSubscriptionId     String?
    stripeSubscriptionStatus String
    createdAt                DateTime @default(now())
    updatedAt                DateTime @updatedAt
}
